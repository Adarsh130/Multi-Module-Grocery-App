{"ast":null,"code":"/**\n * Currency utility functions for Indian Rupee formatting\n */\n\nexport const formatCurrency = amount => {\n  if (amount === null || amount === undefined) return '₹0';\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  if (isNaN(numAmount)) return '₹0';\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(numAmount);\n};\nexport const formatPrice = amount => {\n  if (amount === null || amount === undefined) return '₹0';\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  if (isNaN(numAmount)) return '₹0';\n\n  // Format with Indian number system\n  return `₹${numAmount.toLocaleString('en-IN')}`;\n};\nexport const formatCompactPrice = amount => {\n  if (amount === null || amount === undefined) return '₹0';\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  if (isNaN(numAmount)) return '₹0';\n  if (numAmount >= 10000000) {\n    return `₹${(numAmount / 10000000).toFixed(1)}Cr`;\n  } else if (numAmount >= 100000) {\n    return `₹${(numAmount / 100000).toFixed(1)}L`;\n  } else if (numAmount >= 1000) {\n    return `₹${(numAmount / 1000).toFixed(1)}K`;\n  }\n  return `₹${numAmount.toLocaleString('en-IN')}`;\n};\nexport const calculateDiscount = (originalPrice, salePrice) => {\n  if (!originalPrice || !salePrice) return 0;\n  const original = typeof originalPrice === 'string' ? parseFloat(originalPrice) : originalPrice;\n  const sale = typeof salePrice === 'string' ? parseFloat(salePrice) : salePrice;\n  if (original <= sale) return 0;\n  return Math.round((original - sale) / original * 100);\n};\nexport const formatDiscountPrice = (originalPrice, discountPercent) => {\n  if (!originalPrice || !discountPercent) return formatPrice(originalPrice);\n  const original = typeof originalPrice === 'string' ? parseFloat(originalPrice) : originalPrice;\n  const discount = typeof discountPercent === 'string' ? parseFloat(discountPercent) : discountPercent;\n  const discountedPrice = original * (1 - discount / 100);\n  return formatPrice(discountedPrice);\n};","map":{"version":3,"names":["formatCurrency","amount","undefined","numAmount","parseFloat","isNaN","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPrice","toLocaleString","formatCompactPrice","toFixed","calculateDiscount","originalPrice","salePrice","original","sale","Math","round","formatDiscountPrice","discountPercent","discount","discountedPrice"],"sources":["D:/Adarsh/grocery-app/grocery-app/grocery-frontend/src/utils/currency.js"],"sourcesContent":["/**\n * Currency utility functions for Indian Rupee formatting\n */\n\nexport const formatCurrency = (amount) => {\n  if (amount === null || amount === undefined) return '₹0';\n  \n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  if (isNaN(numAmount)) return '₹0';\n  \n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(numAmount);\n};\n\nexport const formatPrice = (amount) => {\n  if (amount === null || amount === undefined) return '₹0';\n  \n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  if (isNaN(numAmount)) return '₹0';\n  \n  // Format with Indian number system\n  return `₹${numAmount.toLocaleString('en-IN')}`;\n};\n\nexport const formatCompactPrice = (amount) => {\n  if (amount === null || amount === undefined) return '₹0';\n  \n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  if (isNaN(numAmount)) return '₹0';\n  \n  if (numAmount >= 10000000) {\n    return `₹${(numAmount / 10000000).toFixed(1)}Cr`;\n  } else if (numAmount >= 100000) {\n    return `₹${(numAmount / 100000).toFixed(1)}L`;\n  } else if (numAmount >= 1000) {\n    return `₹${(numAmount / 1000).toFixed(1)}K`;\n  }\n  \n  return `₹${numAmount.toLocaleString('en-IN')}`;\n};\n\nexport const calculateDiscount = (originalPrice, salePrice) => {\n  if (!originalPrice || !salePrice) return 0;\n  \n  const original = typeof originalPrice === 'string' ? parseFloat(originalPrice) : originalPrice;\n  const sale = typeof salePrice === 'string' ? parseFloat(salePrice) : salePrice;\n  \n  if (original <= sale) return 0;\n  \n  return Math.round(((original - sale) / original) * 100);\n};\n\nexport const formatDiscountPrice = (originalPrice, discountPercent) => {\n  if (!originalPrice || !discountPercent) return formatPrice(originalPrice);\n  \n  const original = typeof originalPrice === 'string' ? parseFloat(originalPrice) : originalPrice;\n  const discount = typeof discountPercent === 'string' ? parseFloat(discountPercent) : discountPercent;\n  \n  const discountedPrice = original * (1 - discount / 100);\n  \n  return formatPrice(discountedPrice);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}